@page "/"
@using pic__simulator__lehmann.Models
@using System.Xml.Linq
@using System.ComponentModel.Design
@inject ILogger<Programm> _logger;
@inject IModalService modal;

<PageTitle>Index</PageTitle>

<h1>Willkommen beim PIC16 Simulator!</h1>

<button class="btn btn-primary" @onclick="LoadProgram">Lade Programm</button>
 @if (_geladenesProgramm != null)
 {
     @if (!_running)
     {
	     <button class="btn btn-primary" @onclick="ToggleRun">Start</button>
	     <button class="btn btn-primary" @onclick="Step">Step</button>
	     <button class="btn btn-primary" @onclick="Reset">Reset</button>
     }
    else
     {
         <button class="btn btn-primary" @onclick="ToggleRun">Pause</button>
     }
	 <p><input @bind="Interval"/> s</p>
	 
	 <button @onclick="@(()=>modal.Show<Einlesen>("Modal Popup Example"))"class="btn btn-primary">View</button>  
     <table>
         <thead>
             <tr>
             <th>ID</th>
             <th>Breakpoints</th>
             <th>Befehle</th>
             </tr>
         </thead>
         <tbody>
         @{
             int lineCounter = 0;
             foreach (var programmzeile in _geladenesProgramm._programm)
             {
                 //Im Ausführungsblock wird eine andere Referenz benutzt deswegen muss eine neue lokale Variable erstellt werden.
                 int foo = lineCounter;
                 lineCounter++;

                 <tr>
                     <td>@lineCounter</td>
                     <td style="text-align: center">
                         <input type="checkbox" class="btn"  @onchange="eventArgs => { BreakpointCheckBoxClicked(foo, eventArgs.Value); }">
                     </td>
                     <td>@programmzeile</td>
                 </tr>
             }
         }
         </tbody>
     </table>
 }
 else
 {
     <h2>Noch kein Programm geladen</h2>
 }
<button style="margin-bottom: 5px;" @onclick="@(()=>modal.Show<Ports>("Port Settings"))"class="btn btn-primary">Port Settings</button>  


<table class="ram">
	<thead>
	<tr>  
	</tr>
	</thead>
	<tbody>
	@for(int row = 0; row < 16; row++){
		<tr>
			@for(int column = 0; column < 8; column++){
				ram[column, row] = 0;
				<td>@ram[column, row ]</td>
			}
		</tr>
	}
	</tbody>
</table>


@code
{
	private Programm? _geladenesProgramm;

	private int _interval = 5;

	public int Interval
	{
		get => _interval;
		set { _interval = value; _geladenesProgramm.IntervalChange(value);}
	}


	private bool _running = false;
	public bool[] portA = new bool[] { false, false, false, false, false, false, false, false };
	public bool[] portB = new bool[] { false, false, false, false, false, false, false, false };
	private int[,] ram = new int[8,16];
	private List<int> _SelectedBreakpoints { get; set; }  
	
    private void LoadProgram()
    {
        _geladenesProgramm = new Programm(_interval,_logger);
	    _SelectedBreakpoints = new List<int>();
    }

    private void ToggleRun()
    {
        if (_running)
        {
            _geladenesProgramm.Stop();
            _running = !_running;
        }
        else
        {
            _geladenesProgramm.Start();
            _running = !_running;
        }
    }

	private void Reset()
	{
		_geladenesProgramm.Reset();
	}

	private void Step()
    {
        _geladenesProgramm.Step();
    //TODO Implement Step
    }
    
    private void BreakpointCheckBoxClicked(int lineCounter, object aChecked)
    {
        if ((bool) aChecked)
        {
	        _SelectedBreakpoints.Add(lineCounter);
        }
        else
        {
	        _SelectedBreakpoints.Remove(lineCounter);
        }
    }
}
