@page "/"
@using pic__simulator__lehmann.Models
@using System.Xml.Linq
@using System.ComponentModel.Design
@inject ILogger<Programm> _logger;
  

<PageTitle>Index</PageTitle>

<h1>Willkommen beim PIC16 Simulator!</h1>

<button class="btn btn-primary" @onclick="LoadProgram">Lade Programm</button>
 @if (_geladenesProgramm != null)
 {
     @if (!_running)
     {
         <button class="btn btn-primary" @onclick="ToggleRun">Start</button>
     }
    else
     {
         <button class="btn btn-primary" @onclick="ToggleRun">Pause</button>
         <button class="btn btn-primary" @onclick="Step">Step</button>
     }
<p><input @bind="_interval" /> s</p>

     <table>
         <thead>
             <tr>
             <th>ID</th>
             <th>Breakpoints</th>
             <th>Befehle</th>
             </tr>
         </thead>
         <tbody>
         @{
             int lineCounter = 0;
             foreach (var programmzeile in _geladenesProgramm._programm)
             {
                 //Im Ausführungsblock wird eine andere Referenz benutzt deswegen muss eine neue lokale Variable erstellt werden.
                 int foo = lineCounter;
                 lineCounter++;

                 <tr>
                     <td>@lineCounter</td>
                     <td style="text-align: center">
                         <input type="checkbox" class="btn"  @onchange="eventArgs => { BreakpointCheckBoxClicked(foo, eventArgs.Value); }">
                     </td>
                     <td>@programmzeile</td>
                 </tr>
             }
         }
         </tbody>
     </table>
 }
 else
 {
     <h2>Noch kein Programm geladen</h2>
 }
@code
{
    private int _interval = 5;
    private bool _running = false;
    private Programm? _geladenesProgramm;
    [Parameter] public List<int> SelectedBreakpoints { get; set; }


    private void LoadProgram()
    {
        _geladenesProgramm = new Programm(_interval,_logger);
    }

    private void ToggleRun()
    {
        if (_running)
        {
            _geladenesProgramm.Stop();
            _running = !_running;
        }
        else
        {
            _geladenesProgramm.Start();
            _running = !_running;
        }
    }

    
    private void Step()
    {
        _geladenesProgramm.Step();
    //TODO Implement Step
    }
    
    public void BreakpointCheckBoxClicked(int linecounter, object aChecked)
    {
        if ((bool) aChecked)
        {
            SelectedBreakpoints.Add(linecounter);
        }
        else
        {
            SelectedBreakpoints.Remove(linecounter);
        }
        _logger.LogInformation(((bool)aChecked).ToString());
        _logger.LogInformation(linecounter.ToString());
    }  
}
